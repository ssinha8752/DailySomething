5. Longest Palindromic Substring
Medium
Topics
Companies
Hint
Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.


ANSWER 1 : PASS = 48/142

var longestPalindrome = function(s) {
    var length=0;
    var result="";
    for(let i=0;i<s.length;i++)
    {
        for (let j=i;j<s.length;j++)
        {
            let len=j-i+1;
           let subs=s.substring(i,i+len);
            let subs_pal=subs.split('').reverse().join('');
            if(len>length && subs_pal===subs)
            {
                result=subs_pal;
                length=len;
            }
        
        }
    }
    return result;

ANSWER 2 : 95/142

/**
 * @param {string} s
 * @return {string}
 */
var isPalindrome = function(s,i,j){
    if(i>=j)
    {
        return true;
    }

    if(s[i]===s[j]){
        return isPalindrome(s,i+1,j-1);
    }

    return false;
}

var longestPalindrome = function(s) {
    let maxLength=0;
    let start=0;
    for(let i=0;i<s.length;i++)
    {
        for (let j=i;j<s.length;j++)
        {
            let len=j-i+1;
            let subs=s.substring(i,i+len);
            if(isPalindrome(s,i,j)===true)
            {   
                if(len>maxLength&&start>=0)
                {
                    maxLength=len;
                    start=i;
                }
            }
        }   
    }
    return s.substring(start,maxLength+start);
};

};


ANSWER 3 : O(n2)

var longestPalindrome = function(s) {
    if (s.length <= 1) {
        return s;
    }

    let n = s.length;
    let dp = Array.from({ length: n }, () => Array(n).fill(false));
    let start = 0;
    let maxLength = 1;

    // All substrings of length 1 are palindromes
    for (let i = 0; i < n; i++) {
        dp[i][i] = true;
    }

    // Check for substrings of length 2
    for (let i = 0; i < n - 1; i++) {
        if (s[i] === s[i + 1]) {
            dp[i][i + 1] = true;
            start = i;
            maxLength = 2;
        }
    }

    // Check for substrings of length greater than 2
    for (let length = 3; length <= n; length++) {
        for (let i = 0; i < n - length + 1; i++) {
            let j = i + length - 1;
            if (s[i] === s[j] && dp[i + 1][j - 1]) {
                dp[i][j] = true;
                start = i;
                maxLength = length;
            }
        }
    }

    return s.substring(start, start + maxLength);
}