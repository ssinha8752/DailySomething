15. 3Sum
Solved
Medium
Topics
Companies
Hint
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 


ANS = 

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function(nums) {
    let ans=[]
    if(nums.length>=3)
    {
        nums.sort((a,b)=>a-b)
        for(let i=0;i<nums.length;i++)
        {   
            if(nums[i]>0) break;
            if(i>0 && nums[i]===nums[i-1]) continue;
            let sum=0;
            let l=i+1;
            let r=nums.length-1;
            while(l<r)
            {   sum=nums[i]+nums[l]+nums[r];
                if(sum===0)
                {
                    ans.push([nums[i],nums[l],nums[r]]);
                    l++; r--;
                    while(nums[i]===nums[i-1]) l++;
                    while(nums[r]===nums[r+1]) r--;
                }
                else if (sum<0) l++;
                else if (sum>0) r--;
            }
        }
    }
    return ans;
};